var constants={colorsValues:{red:"#ff0000",green:"#00ff00"}};function number_format(value){value+="";for(var rgx=/(\d+)(\d\d\d)/;rgx.test(value);)value=value.replace(rgx,"$1.$2");return value}function buildResourceUpdaterCache(params){const cache={previousElapsedTime:-1/0,resources:{}};return params.resources.forEach(resourceDetails=>{cache.resources[resourceDetails.resourceKey]={hasReachedRealMaxCapacity:!1,hasDepletedStorage:!1}}),cache}function updateResourceCounters(params,cache){const $parentEl=params.$parentEl,elapsedTime=Math.floor((params.timestamps.current-params.timestamps.initial)/1e3);if(elapsedTime<=cache.previousElapsedTime)return;const result=params.resources.map(resourceDetails=>{const resourceKey=resourceDetails.resourceKey;if(cache.resources[resourceKey].hasReachedRealMaxCapacity)return;if(cache.resources[resourceKey].hasDepletedStorage)return;if(0===resourceDetails.state.incomePerHour)return;const $resourceEl=$parentEl.find(`[data-resource-key="${resourceKey}"]`),selectors={$resourceAmount:$resourceEl.find(".amount_display"),$resourceStorage:$resourceEl.find(".storage_display")},resourceState=_calculateResourceState({elapsedTime,resourceDetails});return _updateResourceCounterDOM(selectors,{currentResourceAmount:resourceState.currentResourceAmount,hasReachedStorageMaxCapacity:resourceState.currentResourceAmount>=resourceDetails.storage.maxCapacity}),cache.resources[resourceKey].hasReachedRealMaxCapacity=resourceState.hasReachedRealMaxCapacity||cache.resources[resourceKey].hasReachedRealMaxCapacity,cache.resources[resourceKey].hasDepletedStorage=resourceState.hasDepletedStorage||cache.resources[resourceKey].hasDepletedStorage,{resourceKey,currentAmount:resourceState.currentResourceAmount}});return cache.previousElapsedTime=elapsedTime,result}function _calculateResourceState(params){const maxPracticalStorage=Math.max(params.resourceDetails.storage.maxCapacity,params.resourceDetails.storage.overflowCapacity);if(params.resourceDetails.state.initial>=maxPracticalStorage)return{currentResourceAmount:params.resourceDetails.state.initial,hasReachedRealMaxCapacity:!0};const theoreticalIncome=params.resourceDetails.state.incomePerHour/3600*params.elapsedTime,theoreticalResourceAmount=params.resourceDetails.state.initial+theoreticalIncome,finalResourceAmount=Math.max(Math.min(maxPracticalStorage,theoreticalResourceAmount),0),hasReachedRealMaxCapacity=finalResourceAmount>=maxPracticalStorage,hasDepletedStorage=finalResourceAmount<=0&&theoreticalIncome<0;return{currentResourceAmount:finalResourceAmount,hasReachedRealMaxCapacity,hasDepletedStorage}}function _updateResourceCounterDOM(selectors,resourceState){const resourceDisplayValue=number_format(Math.floor(resourceState.currentResourceAmount)),resourceDisplayColor=resourceState.hasReachedStorageMaxCapacity?constants.colorsValues.red:constants.colorsValues.green;selectors.$resourceAmount.html(resourceDisplayValue),selectors.$resourceAmount.css("color",resourceDisplayColor),selectors.$resourceStorage.css("color",resourceDisplayColor)}class ResourceTooltip{constructor({resourceKey,$parentEl,values,bodyCreator}){this.resourceKey=resourceKey,this.bodyCreator=bodyCreator,this.initialValues=values,this.cache={$parentEl,$elements:void 0,qTipAPI:void 0},this._initialise(values)}updateValues(values){const initialValues=this._getInitialValues();initialValues.state.current=values.state.current;const bodyHTML=this._createTooltipBody(initialValues);this._getQTipAPI().set("content.text",bodyHTML)}_initialise(values){const bodyHTML=this._createTooltipBody(values),$elements=this._getDOMElements(),$hookEl=$elements.$hookEl,$targetEl=$elements.$tooltipTargetEl,$triggerEls=$elements.$tooltipTriggerEls,sharedSettings={show:{delay:0,effect:!1},hide:{delay:0,effect:!1},style:{classes:"tiptip_content ui-tooltip-tipsy ui-tooltip-shadow"}},tooltipOptions=$.extend({},{content:bodyHTML,position:{target:$targetEl,my:"top center",at:"bottom center",adjust:{y:10}}},sharedSettings);$hookEl.qtip(tooltipOptions),$triggerEls.not($hookEl).on("mouseenter",function(){$hookEl.trigger("mouseenter")}).on("mouseleave",function(){$hookEl.trigger("mouseleave")}),this.cache.qTipAPI=$hookEl.qtip("api")}_findElements(){const resourceKey=this._getResourceKey(),$parentEl=this._getParentEl(),$resourceEls=$parentEl.find(`[data-resource-key="${resourceKey}"]`),$hookEl=$resourceEls.filter(".tooltip-hook"),$tooltipTargetEl=$resourceEls.filter(".tooltip-target"),$tooltipTriggerEls=$resourceEls.filter(".tooltip-trigger");return{$hookEl,$tooltipTargetEl,$tooltipTriggerEls}}_getResourceKey(){return this.resourceKey}_getParentEl(){return this.cache.$parentEl}_getDOMElements(){return this.cache.$elements||(this.cache.$elements=this._findElements()),this.cache.$elements}_getInitialValues(){return this.initialValues}_getQTipAPI(){return this.cache.qTipAPI}_createTooltipBody(values){return this.bodyCreator(values)}}function _calculateTimeToStorageLimit({incomePerHour,currentAmount,storageMaxCapacity}){const resourceAmountDifference=storageMaxCapacity-currentAmount,incomePerSecond=incomePerHour/3600,secondsToReachCapacity=Math.ceil(resourceAmountDifference/incomePerSecond);return secondsToReachCapacity}function _createResourceTimeToStorageDisplayValue({isOnVacation,resourceState:{incomePerHour,currentAmount,storageMaxCapacity},lang}){if(incomePerHour<0)return lang.income_minus;if(isOnVacation)return lang.income_vacation;if(0===incomePerHour)return lang.income_no_mine;if(currentAmount>=storageMaxCapacity)return lang.income_full;const secondsToReachCapacity=_calculateTimeToStorageLimit({incomePerHour,currentAmount,storageMaxCapacity});return uniengine.common.prettyTime({seconds:secondsToReachCapacity})}function _createResourceStorageStatusDisplayValue({resourceState:{currentAmount,storageMaxCapacity,overflowMaxCapacity},lang}){const capacityWarningThreshold=.8,hasOverflownStorage=currentAmount>=storageMaxCapacity;return currentAmount<=0?lang.Store_status_Empty:hasOverflownStorage?overflowMaxCapacity>storageMaxCapacity?lang.Store_status_Overload:lang.Store_status_Full:currentAmount>=.8*storageMaxCapacity?lang.Store_status_NearFull:lang.Store_status_OK}function createProductionResourceTooltipBody(values){const lang=PHPInject_topnav_lang,incomeSign=values.state.incomePerHour>=0?"+":"-",fullStoreInText=_createResourceTimeToStorageDisplayValue({resourceState:{currentAmount:void 0!==values.state.current?values.state.current:values.state.initial,isOnVacation:values.isOnVacation,incomePerHour:values.state.incomePerHour,storageMaxCapacity:values.storage.maxCapacity,overflowMaxCapacity:values.storage.overflowCapacity},lang}),storageStatusText=_createResourceStorageStatusDisplayValue({resourceState:{currentAmount:void 0!==values.state.current?values.state.current:values.state.initial,incomePerHour:values.state.incomePerHour,storageMaxCapacity:values.storage.maxCapacity,overflowMaxCapacity:values.storage.overflowCapacity},lang}),bodyHTML=`\n        <div class="center">\n            <b>${values.resourceName}</b>\n        </div>\n        <div class="center">\n            <b>(${incomeSign}${number_format(values.state.incomePerHour)} / h)</b>\n        </div>\n        <div>\n            <div class="ResL">\n                ${lang.When_full_store}\n            </div>\n            <div class="ResR">\n                ${fullStoreInText}\n            </div>\n        </div>\n        <div>\n            <div class="ResL">\n                ${lang.Store_Status}\n            </div>\n            <div class="ResR">\n                ${storageStatusText}\n            </div>\n        </div>\n    `;return bodyHTML}function createEnergyResourceTooltipBody(values){const energyUnusedColor=values.unused>=0?constants.colorsValues.green:constants.colorsValues.red,bodyHTML=`\n        <div class="center">\n            <b>${values.resourceName}</b>\n        </div>\n        <div class="center">\n            <b style="color: ${energyUnusedColor}">${number_format(values.unused)}</b>\n        </div>\n        <div class="center">\n            (${number_format(values.used)} / ${number_format(values.total)})\n        </div>\n    `;return bodyHTML}$(document).ready(function(){new ResourceTooltip({resourceKey:"energy",$parentEl:$("#topnav_resources"),values:PHPInject_topnav_data.specialResourcesState.energy,bodyCreator:createEnergyResourceTooltipBody})});