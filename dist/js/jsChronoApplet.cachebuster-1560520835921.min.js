class CountdownHandler{constructor(config){this.registeredCountdowns=new Set,this.registeredIntervalID=void 0,this.config={serverTimestampOffset:config.serverTimestampOffset,LANG:config.LANG}}registerCountdown(countdownCtorArgs){const endPromise=new Promise(resolve=>{this.registeredCountdowns.add({$element:countdownCtorArgs.$element,endTimestamp:1e3*countdownCtorArgs.endTimestamp,isReverse:countdownCtorArgs.isReverse,reverseEndTimestamp:1e3*countdownCtorArgs.reverseEndTimestamp,serverTimestampOffset:this.config.serverTimestampOffset,LANG:this.config.LANG,promiseResolver:resolve})});return this._startEventLoop(),endPromise}unregisterCountdown(countdown){this.registeredCountdowns.delete(countdown)}_startEventLoop(){this.registeredIntervalID||(this.registeredIntervalID=setInterval(()=>this._processCountdowns(),500))}_stopEventLoop(){clearInterval(this.registeredIntervalID),this.registeredIntervalID=void 0}_processCountdowns(){[...this.registeredCountdowns].forEach(countdown=>{const result=this._onTimeCountdownTick({$element:countdown.$element,endTimestamp:countdown.endTimestamp,isReverse:countdown.isReverse,reverseEndTimestamp:countdown.reverseEndTimestamp,serverTimestampOffset:countdown.serverTimestampOffset,LANG:countdown.LANG});result.hasFinished&&(this.unregisterCountdown(countdown),countdown.promiseResolver())}),this.registeredCountdowns.size||this._stopEventLoop()}_onTimeCountdownTick({$element,endTimestamp,isReverse,reverseEndTimestamp,serverTimestampOffset,LANG}){const clientTimestamp=(new Date).getTime(),currentTimestamp=clientTimestamp+serverTimestampOffset;let timestampDiff=endTimestamp-currentTimestamp,countdownDisplayValue;isReverse&&(timestampDiff*=-1);const hasFinished=isReverse&&currentTimestamp>=reverseEndTimestamp+serverTimestampOffset||!(timestampDiff>0);return countdownDisplayValue=hasFinished?"-":this._createTimeCountdownDisplayValue({seconds:timestampDiff/1e3,LANG}),$element.innerHTML=countdownDisplayValue,{hasFinished}}_createTimeCountdownDisplayValue({seconds,LANG}){seconds=Math.floor(seconds);const SECONDS_IN_MINUTE=60,SECONDS_IN_HOUR=3600,SECONDS_IN_DAY=86400,days=Math.floor(seconds/86400);seconds-=86400*days;const hours=Math.floor(seconds/3600);seconds-=3600*hours;const minutes=Math.floor(seconds/60);seconds-=60*minutes;const hoursString=strPadLeft(String(hours),2,"0"),minutesString=strPadLeft(String(minutes),2,"0"),secondsString=strPadLeft(String(seconds),2,"0"),timePieces=[];return days>0&&timePieces.push(LANG.Chrono_PrettyTime.chronoFormat.daysFullJSFunction(days)),timePieces.push(`${hoursString}:${minutesString}:${secondsString}`),timePieces.join(" ")}}function strPadLeft(value,desiredLenght,padString){const lengthLeft=desiredLenght-value.length;if(lengthLeft<=0)return value;const padding=new Array(lengthLeft).fill(padString,0,lengthLeft).join("");return`${padding}${value}`}