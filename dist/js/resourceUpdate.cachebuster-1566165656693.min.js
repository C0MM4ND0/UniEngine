var constants={colorsValues:{red:"#ff0000",green:"#00ff00"}};function number_format(value){value+="";for(var rgx=/(\d+)(\d\d\d)/;rgx.test(value);)value=value.replace(rgx,"$1.$2");return value}function buildResourceUpdaterCache(params){const cache={previousElapsedTime:-1/0,resources:{}};return params.resources.forEach(resourceDetails=>{cache.resources[resourceDetails.resourceKey]={hasReachedRealMaxCapacity:!1,hasDepletedStorage:!1,hasNoProduction:!1}}),cache}function updateResourceCounters(params,cache){const $parentEl=params.$parentEl,elapsedTime=Math.floor((params.timestamps.current-params.timestamps.initial)/1e3);elapsedTime<=cache.previousElapsedTime||(params.resources.forEach(resourceDetails=>{const resourceKey=resourceDetails.resourceKey;if(cache.resources[resourceKey].hasReachedRealMaxCapacity)return;if(cache.resources[resourceKey].hasDepletedStorage)return;if(cache.resources[resourceKey].hasNoProduction)return;const $resourceEl=$parentEl.find(`[data-resource-key="${resourceKey}"]`),selectors={$resourceAmount:$resourceEl.find(".amount_display"),$resourceStorage:$resourceEl.find(".storage_display")},resourceState=_calculateResourceState({elapsedTime,resourceDetails});_updateResourceCounterDOM(selectors,resourceState),cache.resources[resourceKey].hasReachedRealMaxCapacity=resourceState.hasReachedRealMaxCapacity,cache.resources[resourceKey].hasDepletedStorage=resourceState.hasDepletedStorage,cache.resources[resourceKey].hasNoProduction=resourceState.hasNoProduction}),cache.previousElapsedTime=elapsedTime)}function _calculateResourceState(params){const maxPracticalStorage=Math.max(params.resourceDetails.storage.maxCapacity,params.resourceDetails.storage.overflowCapacity),theoreticalIncome=params.resourceDetails.state.incomePerHour/3600*params.elapsedTime,theoreticalResourceAmount=params.resourceDetails.state.initial+theoreticalIncome,finalResourceAmount=Math.max(Math.min(maxPracticalStorage,theoreticalResourceAmount),0),hasReachedStorageMaxCapacity=finalResourceAmount>=params.resourceDetails.storage.maxCapacity,hasReachedRealMaxCapacity=finalResourceAmount>=maxPracticalStorage,hasDepletedStorage=finalResourceAmount<=0&&theoreticalIncome<0,hasNoProduction=0==theoreticalIncome;return{currentResourceAmount:finalResourceAmount,hasReachedStorageMaxCapacity,hasReachedRealMaxCapacity,hasDepletedStorage,hasNoProduction}}function _updateResourceCounterDOM(selectors,resourceState){const resourceDisplayValue=number_format(Math.floor(resourceState.currentResourceAmount)),resourceDisplayColor=resourceState.hasReachedStorageMaxCapacity?constants.colorsValues.red:constants.colorsValues.green;selectors.$resourceAmount.html(resourceDisplayValue),selectors.$resourceAmount.css("color",resourceDisplayColor),selectors.$resourceStorage.css("color",resourceDisplayColor)}function planetSelector_changeSelection($selectorEl,selectionIdxModifier){const $options=$selectorEl.find("option"),$selectedOption=$options.filter(":selected"),currentSelectedIdx=$options.index($selectedOption),$changedSelection=$options.eq(currentSelectedIdx+selectionIdxModifier);$selectorEl.val($changedSelection.val())}function planetSelector_switchPlanetType($selectorEl,otherPlanetID){const $options=$selectorEl.find("option"),$changedSelection=$options.filter(`[data-planet-id="${otherPlanetID}"]`);$selectorEl.val($changedSelection.val())}function planetSelector_navigate($selectorEl){const currentSelectionURL=$selectorEl.val();window.location=currentSelectionURL}class ResourceTooltip{constructor({resourceKey,$parentEl,values,bodyCreator}){this.resourceKey=resourceKey,this.bodyCreator=bodyCreator,this.cache={$parentEl,$elements:void 0,qTipAPI:void 0},this._initialise(values)}_initialise(values){const bodyHTML=this._createTooltipBody(values),$elements=this._getDOMElements(),$hookEl=$elements.$hookEl,$targetEl=$elements.$tooltipTargetEl,$triggerEls=$elements.$tooltipTriggerEls,sharedSettings={show:{delay:0,effect:!1},hide:{delay:0,effect:!1},style:{classes:"tiptip_content ui-tooltip-tipsy ui-tooltip-shadow"}},tooltipOptions=$.extend({},{content:bodyHTML,position:{target:$targetEl,my:"top center",at:"bottom center",adjust:{y:10}}},sharedSettings);$hookEl.qtip(tooltipOptions),$triggerEls.not($hookEl).on("mouseenter",function(){$hookEl.trigger("mouseenter")}).on("mouseleave",function(){$hookEl.trigger("mouseleave")}),this.cache.qTipAPI=$hookEl.qtip("api")}_findElements(){const resourceKey=this._getResourceKey(),$parentEl=this._getParentEl(),$resourceEls=$parentEl.find(`[data-resource-key="${resourceKey}"]`),$hookEl=$resourceEls.filter(".tooltip-hook"),$tooltipTargetEl=$resourceEls.filter(".tooltip-target"),$tooltipTriggerEls=$resourceEls.filter(".tooltip-trigger");return{$hookEl,$tooltipTargetEl,$tooltipTriggerEls}}_getResourceKey(){return this.resourceKey}_getParentEl(){return this.cache.$parentEl}_getDOMElements(){return this.cache.$elements||(this.cache.$elements=this._findElements()),this.cache.$elements}_createTooltipBody(values){return this.bodyCreator(values)}}function createProductionResourceTooltipBody(values){const lang=PHPInject_topnav_lang,bodyHTML=`\n        <div class="center">\n            <b>${values.resourceName}</b>\n        </div>\n        <div class="center">\n            <b>(${values.incomePerHour} / h)</b>\n        </div>\n        <div>\n            <div class="ResL">\n                ${lang.When_full_store}\n            </div>\n            <div class="ResR">\n                ${values.fullStoreInText}\n            </div>\n        </div>\n        <div>\n            <div class="ResL">\n                ${lang.Store_Status}\n            </div>\n            <div class="ResR">\n                ${values.storeStatusText}\n            </div>\n        </div>\n    `;return bodyHTML}function createEnergyResourceTooltipBody(values){const bodyHTML=`\n        <div class="center">\n            <b>${values.resourceName}</b>\n        </div>\n        <div class="center">\n            <b>${values.unused}</b>\n        </div>\n        <div class="center">\n            (${values.used} / ${values.total})\n        </div>\n    `;return bodyHTML}$(document).ready(function(){var PlanetList=$("#planet");$("#plType").is(":visible")?$(".plBut").width(PlanetList.width()/2-$("#plType").width()+2):$(".plBut").width(PlanetList.width()/2+1),$("#prevPl").on("click",function(){planetSelector_changeSelection(PlanetList,-1),planetSelector_navigate(PlanetList)}),$("#nextPl").on("click",function(){planetSelector_changeSelection(PlanetList,1),planetSelector_navigate(PlanetList)}),$("#plType").on("click",function(evt){const $btnEl=$(evt.currentTarget),otherPlanetID=$btnEl.data("id");planetSelector_switchPlanetType(PlanetList,otherPlanetID),planetSelector_navigate(PlanetList)}),PlanetList.on("change",function(){planetSelector_navigate(PlanetList)}),["metal","crystal","deuterium"].forEach(resourceKey=>{new ResourceTooltip({resourceKey,$parentEl:$("#topnav_resources"),values:PHPInject_topnav_data.resourcesState[resourceKey],bodyCreator:createProductionResourceTooltipBody})}),new ResourceTooltip({resourceKey:"energy",$parentEl:$("#topnav_resources"),values:PHPInject_topnav_data.specialResourcesState.energy,bodyCreator:createEnergyResourceTooltipBody})});